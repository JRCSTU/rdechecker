# -*- coding: utf-8 -*-
# !/usr/bin/env python
#
# Copyright 2017 European Commission (JRC);
# Licensed under the EUPL (the 'Licence');
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at: http://ec.europa.eu/idabc/eupl
"""Compile it with `coconut rdechecker/*coco"""

def parse_call_spec(call_spec, no_recurse=False):
    """
    :param call_spec:
        generically, call-spec(s) are triplets (function, *args, **kwds),
        and can be given in any the following forms:

        - string:       the func alone
        - 3plet:        the func, args, kwds with any of the last 2 missing
        - 3key-dict:    the keys are: func, args, kwds
        - a list of call-specs
    """
    case call_spec:
        match rule is str:
            return (rule, [], {})

        match (rule is str, [*args] is (list, tuple), {**kwds}):
            return (rule, args, kwds)
        match (rule is str, [*args] is (list, tuple)):
            return (rule, args, {})
        match (rule is str, ):
            return (rule, [], {})

        match {'func': rule is str}:
            return (rule, [], {})
        match {'func': rule is str, 'args': [*args] is (list, tuple)}:
            return (rule, args, {})
        match {'func': rule is str, 'kwds': {**kwds}}:
            return (rule, [], kwds)
        match {'func': rule is str, 'args': [*args] is (list, tuple), 'kwds': {**kwds}}:
            return (rule, args, kwds)

        ## Attempt parsing them as multi-rules,
        #  but descend only 1 level (to protect config-user).
        #
        match call_specs is (list, tuple) if not no_recurse:
            return [parse_call_spec(r, no_recurse=True)
                    for r in call_specs]
    else:
        raise Exception("Invalid call-spec syntax: {}".format(call_spec))
